1) утилита jmap. Команда jmap -histo pid.
   После добавления, получения и удаления данных, на полученной гистограмме мы видим количество созданных объектов, 
   объем памяти в байтах и полное имя класса.

2) утилита jstat. Команда jstat -gc pid 1s.
   После добавления, получения и удаления данных в объеме 1 млн заявок, в полученной таблице мы видим как меняются 
разные участки памяти. Выполняется 10 сборок мусора в регионах младшего поколения за время 0,295 с. Выжившие объекты 
перемещаются из пространства eden в пространство S1, а затем в старшее пространство.

3) программа jconsole.
   После добавления, получения и удаления данных в объеме 1 млн заявок, мы видим:
   а) на графике памяти идет резкое увеличение объема используемой памяти, 
      далее она меняется циклически и становится линейной. Объем используемой памяти составил 223,5 Мб; 
      объем зафиксированной памяти - 355,5 Мб; максимальный объем памяти - 1,6 Гб.
   б) на графике потоков показано количество активных потоков с течением времени. Сначала потоков было 16, 
      затем снизилось до 14.
   в) на графике классов показано количество классов, загруженных с течением времени. 
      Общее количество загруженных классов составило 2410.
   г) на графике использования ЦП приведено, сколько процентов ресурсов ЦП использовалось приложением 
      на разных этапах его жизненного цикла.
